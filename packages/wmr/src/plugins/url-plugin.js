import { relative, basename, sep, posix } from 'path';
import { promises as fs } from 'fs';

const IMPLICIT_URL = /\.(?:png|jpe?g|gif|webp|svg|mp4|webm|ogg|mp3|wav|flac|aac|woff2?|eot|ttf|otf)$/i;

const escapeUrl = url => url.replace(/#/g, '%23').replace(/'/g, "\\'").replace(/"/g, '\\"');

/**
 * @param {object} [options]
 * @param {object} [options.inline = false] Emit a Data URL module exporting the URL string.
 * @param {object} [options.root] Used to resolve the URL when `inline` is `true`.
 * @returns {import('rollup').Plugin}
 */
export default function urlPlugin({ inline, root } = {}) {
	return {
		name: 'url-plugin',
		async resolveId(id, importer) {
			if (id[0] === '\0' || id[0] === '\b') return;

			if (id.startsWith('url:')) {
				// explicit `url:` prefix
				id = id.slice(4);
			} else if (!inline) {
				// In dev mode, we eagerly process un-prefixed non-source files.
				// This would be an infinite Rollup loop for prod, which instead uses load().
				return;
			} else if (!IMPLICIT_URL.test(id)) {
				// implicitly apply `url:` all files except source code
				return;
				// ^ no prefix, not an implicit URL (in dev) - nothing to do.
			}

			const resolved = await this.resolve(id, importer, { skipSelf: true });
			if (!resolved) return;

			// In dev mode, we turn the import into an inline module that avoids a network request:
			if (inline) {
				const url = '/' + relative(root, resolved.id).replace(/^\./, '').split(sep).join(posix.sep) + '?asset';
				return {
					id: escapeUrl(`data:text/javascript,export default${JSON.stringify(url)}`),
					external: true
				};
			}
			resolved.id = `\0url:${resolved.id}`;
			return resolved;
		},
		async load(id) {
			if (id.startsWith('\0url:')) {
				// explicit `url:` prefix (generated by our resolveId):
				id = id.slice(5);
			} else if (!IMPLICIT_URL.test(id)) {
				// implicitly apply `url:` images, fonts, etc.
				return;
				// ^ no prefix, not an implicit URL - nothing to do
			}

			const fileId = this.emitFile({
				type: 'asset',
				name: basename(id),
				source: await fs.readFile(id)
			});
			this.addWatchFile(id);
			return `export default import.meta.ROLLUP_FILE_URL_${fileId}`;
		}
	};
}
